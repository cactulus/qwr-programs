qwr "stb_image.o";

use "gl";

extern stbi_load :: (filename str, x *int, y *int, comp *int, req_comp int) *u8;
extern stbi_set_flip_vertically_on_load :: (flag_true_if_should_flip int);
extern stbi_image_free :: (retval_from_stbi_load *u8);

texture_load :: (path str, format GLenum) GLuint {
    width: int;
    height: int;
    nrChannels: int;

    stbi_set_flip_vertically_on_load(true);
    data := stbi_load(path, &width, &height, &nrChannels, 0);

    texture: GLuint;
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, format, GL_UNSIGNED_BYTE, data);

    stbi_image_free(data);

    return texture;
}

texture_bind :: (texture GLuint) {
    glBindTexture(GL_TEXTURE_2D, texture);
}
